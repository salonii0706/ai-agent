{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMhdNprReKdDbvO01qHtZwM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZZ4V2167wtrb","executionInfo":{"status":"ok","timestamp":1747780858511,"user_tz":-330,"elapsed":2313,"user":{"displayName":"Saloni","userId":"12921202910071408193"}},"outputId":"62b9de2c-783c-43ef-fe78-fbda7fa2bf64"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: SpeechRecognition in /usr/local/lib/python3.11/dist-packages (3.14.3)\n","Collecting gTTS\n","  Downloading gTTS-2.5.4-py3-none-any.whl.metadata (4.1 kB)\n","Requirement already satisfied: pydub in /usr/local/lib/python3.11/dist-packages (0.25.1)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from SpeechRecognition) (4.13.2)\n","Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from gTTS) (2.32.3)\n","Collecting click<8.2,>=7.1 (from gTTS)\n","  Downloading click-8.1.8-py3-none-any.whl.metadata (2.3 kB)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->gTTS) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->gTTS) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->gTTS) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->gTTS) (2025.4.26)\n","Downloading gTTS-2.5.4-py3-none-any.whl (29 kB)\n","Downloading click-8.1.8-py3-none-any.whl (98 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m98.2/98.2 kB\u001b[0m \u001b[31m6.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: click, gTTS\n","  Attempting uninstall: click\n","    Found existing installation: click 8.2.0\n","    Uninstalling click-8.2.0:\n","      Successfully uninstalled click-8.2.0\n","Successfully installed click-8.1.8 gTTS-2.5.4\n"]}],"source":["!pip install SpeechRecognition gTTS pydub"]},{"cell_type":"code","source":["import speech_recognition as sr\n","from gtts import gTTS\n","from pydub import AudioSegment\n","import re\n","import io\n","from IPython.display import Audio, display"],"metadata":{"id":"Q1pd_QV-zQ4s","executionInfo":{"status":"ok","timestamp":1747780862673,"user_tz":-330,"elapsed":178,"user":{"displayName":"Saloni","userId":"12921202910071408193"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["import speech_recognition as sr\n","from gtts import gTTS\n","from pydub import AudioSegment\n","import re\n","import io\n","from IPython.display import Audio, display\n"],"metadata":{"id":"rB_j6Lcu5cC_","executionInfo":{"status":"ok","timestamp":1747780867126,"user_tz":-330,"elapsed":9,"user":{"displayName":"Saloni","userId":"12921202910071408193"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["def parse_expression(text):\n","    text = text.lower()\n","    word_to_num = {\n","        'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4',\n","        'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9',\n","        'plus': '+', 'minus': '-', 'times': '*', 'divided by': '/', 'divide': '/'\n","    }\n","    for word, num in word_to_num.items():\n","        text = text.replace(word, num)\n","    pattern = r'(\\d+\\.?\\d*)\\s*([+\\-*/])\\s*(\\d+\\.?\\d*)'\n","    match = re.match(pattern, text)\n","    if not match:\n","        return None, \"Invalid expression. Please say something like 'two plus three'.\"\n","    num1, operator, num2 = match.groups()\n","    try:\n","        num1 = float(num1)\n","        num2 = float(num2)\n","        return (num1, operator, num2), None\n","    except ValueError:\n","        return None, \"Error parsing numbers.\""],"metadata":{"id":"OePbWCtB7YIw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def calculate(num1, operator, num2):\n","    try:\n","        if operator == '+':\n","            return num1 + num2, None\n","        elif operator == '-':\n","            return num1 - num2, None\n","        elif operator == '*':\n","            return num1 * num2, None\n","        elif operator == '/':\n","            if num2 == 0:\n","                return None, \"Division by zero is not allowed.\"\n","            return num1 / num2, None\n","        else:\n","            return None, \"Invalid operator.\"\n","    except Exception as e:\n","        return None, f\"Calculation error: {str(e)}\""],"metadata":{"id":"FWyaY-m07cCP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def convert_to_wav(input_file):\n","    audio = AudioSegment.from_file(input_file)\n","    output_file = \"/content/cc.mp3\"\n","    audio = audio.set_frame_rate(16000).set_channels(1).set_sample_width(2)\n","    audio.export(output_file, format=\"wav\")\n","    return output_file\n"],"metadata":{"id":"dObgTAo77i6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def process_audio(audio_file):\n","    recognizer = sr.Recognizer()\n","    with sr.AudioFile(audio_file) as source:\n","        audio = recognizer.record(source)\n","        try:\n","            text = recognizer.recognize_google(audio)\n","            return text, None\n","        except sr.UnknownValueError:\n","            return None, \"Could not understand the audio.\"\n","        except sr.RequestError as e:\n","            return None, f\"Speech recognition error: {e}\"\n"],"metadata":{"id":"P_Zw-1i_7mwH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def text_to_speech(text):\n","    tts = gTTS(text=text, lang='en')\n","    audio_buffer = io.BytesIO()\n","    tts.write_to_fp(audio_buffer)\n","    audio_buffer.seek(0)\n","    return audio_buffer\n"],"metadata":{"id":"66rWG41E7rOo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n","input_file = list(uploaded.keys())[0]\n","audio_file = convert_to_wav(input_file)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":110},"id":"EJAQ3vYa7t9_","executionInfo":{"status":"ok","timestamp":1747715671553,"user_tz":-330,"elapsed":26079,"user":{"displayName":"Saloni","userId":"12921202910071408193"}},"outputId":"6b881737-3b73-48a8-a4b1-261ae0a61c73"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-8367d4da-7601-438d-bd3e-47249ad2f503\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-8367d4da-7601-438d-bd3e-47249ad2f503\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving WhatsApp Ptt 2025-05-20 at 3.29.30 PM (online-audio-converter.com).mp3 to WhatsApp Ptt 2025-05-20 at 3.29.30 PM (online-audio-converter.com) (1).mp3\n"]}]},{"cell_type":"code","source":["text, error = process_audio(audio_file)\n","if error:\n","    result_text = error\n","else:\n","    expression, error = parse_expression(text)\n","    if error:\n","        result_text = error\n","    else:\n","        num1, operator, num2 = expression\n","        result, calc_error = calculate(num1, operator, num2)\n","        if calc_error:\n","            result_text = calc_error\n","        else:\n","            result_text = f\"The result is {result}\"\n"],"metadata":{"id":"ssAK_JkF8SLw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["audio_buffer = text_to_speech(result_text)\n","audio = Audio(audio_buffer.read(), autoplay=True)\n","display(audio)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":75},"id":"zM1H5wnO8Tqo","executionInfo":{"status":"ok","timestamp":1747715675700,"user_tz":-330,"elapsed":62,"user":{"displayName":"Saloni","userId":"12921202910071408193"}},"outputId":"d1628276-e119-4139-d769-2ff70e3c7352"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.lib.display.Audio object>"],"text/html":["\n","                <audio  controls=\"controls\" autoplay=\"autoplay\">\n","                    <source src=\"data:audio/wav;base64,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O5U9jd5S08S2QeI6ue6GIx6GDhg8NQsJ2Mcuej/+n/////+6pda84cRkNT////+jqtz2Tbea1aWZak01gtjsDoOGW1cDj4uslABg0Wm4pOJHFPtO//OExBgtVAJ4AObK3cMOCo7AMTCgLhwweCTLSIOMooeJZgoAgwQM45DIZsUIgKJmPHhvjAaAWGMAxfByBYFr6gpWBr2Wm4NBv62+7jVs9Sl/rXIDcZ+Z23Xl+P87j/P7y1DDkQ7WtzcXlFLlcllurrUMVb0YWgy2YowseLRAQZHSnVHQQctFMViC/////////+76pc4mqfP17ZN//69C8t6WQrOqS4cYjmOVuy2gTfAMyumSSswIJBekNAUAlURN//OExBUkyeqIAN6WmH0U2YPZ0/ogAH9iBhp62yAxEgmAwaPxsxEI5KoDFmFo8mPWmMMA0Wl01oFB2Lxhnpb+XUWThv9n9I7FrXxB5eahNH65NEWMHsfzUrPrAbEDT1C1rdCfk3OtYsfLIod51sTfvia//l2gaHTz0G/////cmgCjjT+ro///wSJIEqq7zroGXOkH9gIGHh1INDMPAAgPCLw4JppoLdBCMhyxGj4pnYT3hMWu1E5HHgWXLlMUwywg//OExDQmEfKMAN5emFBK6JCS+AsE02PIuOiy/b9sEllR02KSCocgcC1Cip9TRbBUAtZe8YE9e9ocX+Vlr/AfW8dmcoTAsK7dID7f99f/X//949/SJWNo2e6jn//9Bp040H3f//7Og2XCofAihAHxinJqxppklAGHztcp4dNizPSETxaWS3jbk3ClcsMSebaWV15sWq5XGmTveVnty1EH5/+Rye58wzqdjVdpKgrEX5qstuy2A17B1YtDLL0rYfmn//OExE4mjBaMANYE3QwgUgjUbgZq09t93ew5nMU2FeflutXIzZvXZqhsdqBVBjkHQhDPYvlgQI7BjK32///////7f//////3rX+VnpYhkbKibKyyKSo5ogVV5L3IApmdGfAorihKJHCWpopKgTYyKyhpYU0OHI0YsFu9EWdpgH3ru3G27j9caUQdMYh1/pG/8b949e0eSm6WGYpgC0GKdLlM7OVZlQ06Vavqxy/UqGstGGLB1CzF+cvYuMRoTjQH//OExGYk3BaEANvK3QBBSDDMcVES7ujsqC3////////+n3/////vov/9JSOyluhU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iRDIyz0co1HYs8UBKSzGdNLxQrTlyfMnROMWrCSEWBKzd1cIO0Isexipa5hTEu0oM0vmCimROTWV21uVVcrE1nKIFqxqkn7lNlKY6UqIqphAi6kB0XiaJhX4R8JJDXVOD26xEuK8NlA0sr/oZaivMbNYjpQzpLhL//OExPUsRDn0AKJM3G0kKag7dQWySypPD5i1y7KhiTCFshQG0ihZpG+KmsFJtKVBubaiooTYaXPLtswjAyw0y2UVmwRqJke0ZijbLXByzCt7sj8LjitVAzJRNpNF0m0bQkinlpKFUX6FZdTspEEETpLSnEnpflkUizTtYPZqtrBY55L41CoEJg9StxuEIUhRlkZk3CbFImFlH5WUO5qZlcbr5S/O3X5alF7HCp/GEaRuOMEbLYJ4oQtRjJDFqSOD//OExPcz5DHsANMS3XRhZBq5Z+RUOMR7CBhLEDLmrRkrk2km5OlOmJ1Cl88kFK1ZRZPqpyZPosZebTKZ5VdtpWtFM2iGnv3ls9e93HFlGOk9zuokz9h9XRnf4bRqzEE8PLxrhtMzWqUFtGTvfN22yGVZJ5jJ3OvNcic3yflq0hMVJXM0vmqb/50ncxj2wxUIETcNSLiS1xkVyuYZoTEzbrBYVcro2ZBQlFiJEjlOixLG3+SJEiSXLUSASXNRmc7k//OExNoqFCH4AMpM3WTiSWz+8vLU/cjncjMkcokRIhKNVVNIKEoz3nPMzM4xJGfVb3l5mZmcOmc9b6eiSVdqee5qMz/5NI5VeW7zL55b9q2q16o4lTzOPOf///+f6rf3xt7VOf16r/13IoybiKOy/pvssDQoKUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//OExOQmc8noAHmM3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTNiPVMtVCwyKkazFhSMMFRJMw8keDIlQJM8Aoo1hQajZTToNYJq80AXZDJsenMKN7Ixm3jzM8caNN9eE2OkBDYAGHVMQU1FMy4xMDBVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//OExI8QoEwAAPe8JFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\" type=\"audio/wav\" />\n","                    Your browser does not support the audio element.\n","                </audio>\n","              "]},"metadata":{}}]}]}